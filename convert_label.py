import re
import os
import sys
import subprocess

class ExtentionException(Exception):
    pass


class InvalidSeparateUnitException(Exception):
    pass


class MoraFormException(Exception):
    pass


class TooFewArgumentException(Exception):
    pass


def read_lab(filename):
    """
    read label file (.lab) generated by Julius segmentation kit and 
    return SegmentationLabel object
    """
    try:
        if not re.search(r'\.lab$', filename):
            raise ExtentionException("read_lab supports only .lab")
    except ExtentionException as e:
        print(e)
        return None
        
    with open(filename, 'r') as f:
        labeldata = [line.split() for line in f if line != ""]
        label = SegmentationLabel(labeldata=labeldata)
        return label


class SegmentationLabel:
    """
    self._labeldata: list of [interval_start_time, interval_end_time, separate_unit]
    """
    def __init__(self, separate_unit='phoneme', labeldata=None):
        self._labeldata = labeldata
        self._separate_unit = separate_unit
    
    def _phoneme_to_mora(self):
        def _merge_interval(interval1, interval2):
            if not interval1:
                return interval2
            if not interval2:
                return interval1
            
            interval_merged = [interval1[0], 
                               interval2[1],
                               interval1[2] + interval2[2]]
            return interval_merged
        
        vowels = ['a', 'i', 'u', 'e', 'o']
        special_phonemes = ['q', 'N', 'silB', 'silE']
        
        labeldata_by_moras = []
        mora_interval = None
        
        for phoneme_interval in self._labeldata:
            unit = phoneme_interval[2]
            if unit in vowels:
                mora_interval = _merge_interval(mora_interval, phoneme_interval)
                labeldata_by_moras.append(mora_interval)
                mora_interval = None
                
            elif unit in special_phonemes:
                try:
                    if mora_interval:
                        raise MoraFormException("a mora which doesn't "\
                                                "have consonant appeared")
                except MoraFormError as e:
                    print(e)
                    labeldata_by_moras.append(mora_interval)
                
                labeldata_by_moras.append(phoneme_interval)
                mora_interval = None
            else:
                mora_interval = _merge_interval(mora_interval, phoneme_interval) 
        
        return labeldata_by_moras
    
    def by_moras(self):
        """
        return new SegmentationLabel object whose separate_unit is mora 
        """
        try:
            if self._separate_unit == 'mora':
                label_by_moras = SegmentationLabel(separate_unit='mora', 
                                               labeldata=self._labeldata)
                return label_by_moras
                                       
            elif self._separate_unit == 'phoneme':
                self._separate_unit = 'mora'
                labeldata_by_moras = self._phoneme_to_mora()
                label_by_moras = SegmentationLabel(separate_unit='mora', 
                                               labeldata=labeldata_by_moras)
                return label_by_moras
        
            else:
                raise InvalidSeparateUnitException(
                    "value of self._separate_unit is invalid")
        except InvalidSeparateUnitException as e:
            print(e)
            return None        
    
    def labeldata(self):
        """
        get self._labeldata
        """
        return self._labeldata
    
    def _convert_line(self, labelunit, num):
        t_min = labelunit[0]
        t_max = labelunit[1]
        if labelunit[2] in ['silB', 'silE']:
            unitname = ""
        else:
            unitname = labelunit[2]
        
        return [f'        intervals [{num + 1}]:',
                f'            xmin = {t_min} ',
                f'            xmax = {t_max} ',
                f'            text = "{unitname}" ']
    
    def _convert_labeldata(self):
        t_max = self._labeldata[-1][1]
        textgrid = ['File type = "ooTextFile"',
                    'Object class = "TextGrid"',
                    ' ',
                    'xmin = 0 ',
                   f'xmax = {t_max} ',
                    'tiers? <exists> ',
                    'size = 1 ',
                    'item []: ',
                    '    item [1]: ',
                    '        class = "IntervalTier" ',
                   f'        name = "{self._separate_unit}" ',
                    '        xmin = 0 ',
                   f'        xmax = {t_max} ',
                   f'        intervals: size = {len(self._labeldata)} ']
        
        for i, labelunit in enumerate(self._labeldata):
            textgrid.extend(self._convert_line(labelunit, i))
        
        return textgrid
    
    def to_textgrid(self, textgrid_filename):
        """
        save self._labeldata to .TextGrid file (available for Praat)
        """
        textgrid = self._convert_labeldata()
        with open(textgrid_filename, 'w') as f:
            f.write("\n".join(textgrid))


if __name__ == '__main__':
    args = sys.argv
    try:
        if len(args) >= 2:
            main_directory = args[1]
        else:
            raise TooFewArgumentException('you should put directory'\
                                          'path in commandline argument')
    except TooFewArgumentException as e:
        print(e)
        sys.exit()
    
    separated_by_mora = None
    while not separated_by_mora in ['y', 'Y', 'n', 'N']:
        separated_by_mora = input('change segmentation unit to mora?'\
                                ' (default:phoneme) y/n:')
    
    for dirpath, dirnames, filenames in os.walk(main_directory):
        lab_filenames = [filename for filename in filenames 
                            if re.search(r'\.lab$', filename)]
        
        for lab_filename in lab_filenames:
            label = read_lab(dirpath + '/' + lab_filename)
            
            if separated_by_mora in ['Y', 'y']:
                label = label.by_moras()
            
            textgrid_filename = re.sub(r"\.lab$", ".TextGrid", lab_filename)
            label.to_textgrid(dirpath + '/' + textgrid_filename)
